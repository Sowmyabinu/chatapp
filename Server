import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server {
    private static final int PORT = 12345;
    private static final ExecutorService pool = Executors.newFixedThreadPool(10);

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server is running on port " + PORT);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("New client connected: " + clientSocket);

                pool.execute(new ClientHandler(clientSocket));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final PrintWriter out;
    private final Scanner in;

    public ClientHandler(Socket clientSocket) throws IOException {
        this.clientSocket = clientSocket;
        this.out = new PrintWriter(clientSocket.getOutputStream(), true);
        this.in = new Scanner(clientSocket.getInputStream());
    }

    
    public void run() {
        try {
            while (true) {
                if (in.hasNext()) {
                    String message = in.nextLine();
                    if ("exit".equalsIgnoreCase(message)) {
                        break;
                    }
                    System.out.println("Received message from " + clientSocket + ": " + message);

                    
                }
            }
        } finally {
            try {
                in.close();
                out.close();
                clientSocket.close();
                System.out.println("Closed connection with " + clientSocket);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
